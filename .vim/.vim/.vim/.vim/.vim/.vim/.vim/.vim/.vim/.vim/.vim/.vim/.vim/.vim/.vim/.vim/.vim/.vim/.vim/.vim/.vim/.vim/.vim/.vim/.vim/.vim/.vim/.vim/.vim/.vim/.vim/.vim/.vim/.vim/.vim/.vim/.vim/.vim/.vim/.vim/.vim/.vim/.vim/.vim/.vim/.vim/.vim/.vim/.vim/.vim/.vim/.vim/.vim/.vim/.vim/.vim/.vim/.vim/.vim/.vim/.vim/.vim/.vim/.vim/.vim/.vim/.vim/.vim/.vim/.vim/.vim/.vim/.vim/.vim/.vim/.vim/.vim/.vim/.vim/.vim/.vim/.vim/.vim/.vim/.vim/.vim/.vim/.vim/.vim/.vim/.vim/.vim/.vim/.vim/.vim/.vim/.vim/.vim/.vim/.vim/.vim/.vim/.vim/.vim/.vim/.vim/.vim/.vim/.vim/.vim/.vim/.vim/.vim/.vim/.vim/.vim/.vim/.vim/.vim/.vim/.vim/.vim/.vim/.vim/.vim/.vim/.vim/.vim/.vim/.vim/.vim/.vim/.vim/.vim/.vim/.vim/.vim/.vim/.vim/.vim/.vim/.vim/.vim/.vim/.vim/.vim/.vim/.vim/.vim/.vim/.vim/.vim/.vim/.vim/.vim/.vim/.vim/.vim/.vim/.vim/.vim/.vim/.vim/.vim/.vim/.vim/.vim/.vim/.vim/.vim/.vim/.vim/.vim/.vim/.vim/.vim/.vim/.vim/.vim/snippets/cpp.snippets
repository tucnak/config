# competitive tpl
snippet comp
	#include <cstdio>
	#include <cstdlib>
	#include <cmath>
	#include <cstring>
	#include <climits>
	#include <iostream>
	#include <algorithm>
	#include <numeric>
	#include <string>
	#include <vector>
	#include <map>
	#include <unordered_map>
	#include <queue>

	using namespace std;

	typedef long long i64;
	typedef long double f64;
	typedef pair<int, int> intp;

	${1:int n;}

	int main() {
		${0:/* solution */}

		return 0;
	}
snippet local
	#ifndef LOCALHOST
		freopen("${1:task}.in", "r", stdin);
		freopen("$1.out", "w", stdout);
	#endif

# #include <...>
snippet inc
	#include <${1:iostream}>
# unordered_map
snippet umap
	unordered_map<${1:Key}, ${2:T}> ${3};
# priority_queue
snippet pq
	priority_queue<${1:T}> ${2};
# pair<int, int>
snippet intp
	pair<int, int>
snippet mp
	make_pair(${1:a}, ${2:b})
# scanf
snippet scan
	scanf("${1}", ${2});
snippet scann
	scanf("%d\n", &n);
snippet scannm
	scanf("%d %d\n", &n, &${1:m});
#printf
snippet print
	printf("${1}", ${2});
# for i
snippet fori
	for (int ${1:i} = 0; $1 < ${2:n}; $1++) ${3}
# foreach
snippet each:
	for (const auto &${1:x}: ${2:container}) ${3}
# lambda
snippet ld
	[${1}](${2}) {
		${3}
	}
# sort vector
snippet sortv
	sort(${1:a}.begin(), $1.end()${2});
# sorting lambda
snippet cmp
	[](const ${1:T} &a, const $1 &b) {
		return ${2:a > b};
	}
